


<form onSubmit={handleSubmit}>
       <div className='flex flex-col  gap-2' >
          <div className='flex  items-center gap-2'>
            <label className='whitespace-nowrap ml-4 font-semibold'>
              Term:
            </label>
            <TextInput
              placeholder='Search...'
              id='searchTerm'
              type='text'
              value={sidebarData.searchTerm}
              onChange={handleChange}
              className='w-64'
            />
          </div>
          <div className='flex sm:flex-col gap-2 justify-around'>
            <div className='flex sm:flex items-center gap-2'>
              <label className='font-semibold'>Sort:</label>
              <Select className='sm:w-64' onChange={handleChange} value={sidebarData.sort} id='sort'>
                <option value='desc'>Latest</option>
                <option value='asc'>Oldest</option>
              </Select>
            </div>
            <div className='flex items-center gap-2'>
              <label className='font-semibold'>Category:</label>
              <Select
                onChange={handleChange}
                value={sidebarData.category}
                id='category'
                className='w-24 sm:w-52'
              >
                <option value='uncategorized'>Select category</option>
            <option value='sports'>sports</option>
            <option value='business'>business</option>
            <option value='health'>health</option>
            <option value='politics'>politics</option>
            <option value='entertainment'>entertainment</option>
            <option value='general'>general</option>
            <option value='Technology'>technology</option>
            <option value='international'>international</option>
            <option value='education'>education</option>
              </Select>
            </div>
          </div>

        </div>
        <div className=' flex justify-center'>
        <Button className='mt-2 self-center focus:ring-0' type='submit' outline gradientDuoTone='purpleToPink'>
          Apply Filters
        </Button>
        </div>
       </form>





"use client";

import { Button, Modal } from "flowbite-react";
import { useState } from "react";

export function Component() {
  const [openModal, setOpenModal] = useState(true);

  return (
    <>
      <Button onClick={() => setOpenModal(true)}>Toggle modal</Button>
      <Modal dismissible show={openModal} onClose={() => setOpenModal(false)}>
        <Modal.Header>Terms of Service</Modal.Header>
        <Modal.Body>
          <div className="space-y-6">
            <p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">
              With less than a month to go before the European Union enacts new consumer privacy laws for its citizens,
              companies around the world are updating their terms of service agreements to comply.
            </p>
            <p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">
              The European Unionâ€™s General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant
              to ensure a common set of data rights in the European Union. It requires organizations to notify users as
              soon as possible of high-risk data breaches that could personally affect them.
            </p>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button onClick={() => setOpenModal(false)}>I accept</Button>
          <Button color="gray" onClick={() => setOpenModal(false)}>
            Decline
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
}



<Popover  className='flex justify-center mt-7 w-full'
        aria-labelledby="default-popover" theme='base'
        open={open}
        onOpenChange={SetOpen}
        content={
        <form className='w-full backdrop-blur flex-none transition-colors duration-500  border border-b-slate-500 rounded-bl-lg rounded-br-lg bg-slate-300 supports-backdrop-blur:bg-white/95 h-64 rounded-lg dark:bg-slate-900/95'>
          <div className='flex mx-2 items-center gap-2 justify-center'>
          <Button.Group className='flex mt-2 w-full justify-start gap-0 items-center'>
            <input className='rounded-3xl bg-slate-300 h-10 rounded-r-none dark:bg-slate-800 w-full'
              placeholder='Search...'
              type='text'
              value={searchTerm}
              onChange={(e)=>setSearchTerm(e.target.value)}
           />
           <div className="w-12 border flex justify-center items-center border-gray-500 rounded-lg rounded-l-none border-l-0 dark:bg-slate-800 h-10"><MdOutlineClear onClick={()=>setSearchTerm('')} className='w-5 h-5'/></div>
          </Button.Group>
          <div className='flex mt-2  items-center'>
          <div className='border dark:bg-slate-800 border-slate-500 h-10 w-10 flex justify-center items-center rounded-2xl' onClick={handleSubmit}><AiOutlineSearch className='w-5 hover:cursor-pointer  h-5'/></div>
          </div>
          </div>
        </form>
      }
      arrow={false}
    >
      {path === '/search' ? (<div></div>) : <div><AiOutlineSearch onClick={()=>SetOpen(!open)} className='w-5 h-5 text-slate-400'/></div>}
    </Popover>




import { Alert, Button, FileInput, Select, TextInput } from 'flowbite-react'
import { useEffect, useState } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import {getDownloadURL, getStorage, ref, uploadBytesResumable} from 'firebase/storage';
import {app} from '../firebase'
import {CircularProgressbar} from 'react-circular-progressbar'
import 'react-circular-progressbar/dist/styles.css';
import { useNavigate,useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';

export default function UpdatePost() {
  const {currentUser} = useSelector(state=>state.user)
  const navigate = useNavigate();
  const [file,setFile] = useState(null);
  const [imageUploudProgress,setImageUploudProgress] = useState(null);
  const [imageUploadError,setImageUploadError] = useState(null);
  const [formData,setFormData] = useState({});
  const [fetchError,setFetchError] = useState()
  const {postId} = useParams()
  console.log(formData.content1)

  useEffect(()=>{
    try{
      const fetchPosts = async ()=>{
        const res = await fetch(`/api/post/getposts?postId=${postId}`);
        const data = await res.json();
       
        if(!res.ok){
          console.log(data.message)
          setFetchError(data.message)
          return;
        }
        if(res.ok){
          console.log(data.posts[0].image)
          setFetchError(null);
          setFormData(data.posts[0])
        }
      }
      fetchPosts();
    }
   
    catch(err){
      console.log(err)
    }
  },[postId])
 

  const handleauploadImage = async()=>{
    try{
      if(!file){
        setImageUploadError("please Select an image")
        return;
      }
      setImageUploadError(null)
      const storage = getStorage(app);
      const fileName = new Date().getTime() + '-' + file.name;
      const storageRef = ref(storage,fileName);
      const uploadTask = uploadBytesResumable(storageRef,file);
      uploadTask.on(
        'state_changed',
        (snapshot)=>{
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          setImageUploudProgress(progress.toFixed(0))
        },
        (error)=>{
          setImageUploadError('image Upload failed');
          setImageUploudProgress(null);
          
        },
        ()=>{
          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL)=>{
           setImageUploudProgress(null);
           setImageUploadError(null);
           setFormData({...formData, image: downloadURL})
          });
        },
      );
      
    }
    catch(err){
      setImageUploadError("image upload failed");
      setImageUploudProgress(null);
      console.log(err)
    }
  }
  const handleSubmit = async (e)=>{
    e.preventDefault();
    try{
      const res = await fetch(`/api/post/updatepost/${formData._id}/${currentUser._id}`, {
        method:'PUT',
        headers: {'Content-Type' : 'application/json'},
        body: JSON.stringify(formData)
      });
      const data = await res.json();
      if(!res.ok){
        setFetchError(data.message);
        return;
      }
      if(res.ok){
        setFetchError(null);
        navigate(`/post/${data.slug}`)
      }
    }catch(err){
      setFetchError('Something went wrong.')
    }
  }
  return (
    <div className='p-3 mx-auto max-w-3xl min-h-screen'>
      <h1 className='text-center font-semibold text-3xl my-7'>Update Post</h1>
      <form className='flex flex-col gap-4' onSubmit={handleSubmit}>
      <div className='flex flex-col gap-4 sm:flex-row justify-between'>
        <TextInput  value={formData.title} required placeholder='Title' id='title' className='flex-1' onChange={(e)=> setFormData({...formData, title: e.target.value})}/>
        <Select value={formData.category} onChange={(e)=> setFormData({...formData, category: e.target.value})}>
        <option value='uncategorized'>Select category</option>
          <option value='sports'>Sports</option>
          <option value='business'>Business</option>
          <option value='health'>Health</option>
          <option value='health'>People</option>
          <option value='politics'>Politics</option>
          <option value='entertainment'>Entertainment</option>
          <option value='general'>General</option>
          <option value='Technology'>Technology</option>
          <option value='international'>International</option>
          <option value='education'>Education</option>
          <option value='breaking'>Breaking news</option>
          <option value='trending'>Trending</option>

        </Select>
      </div>
      <div className="flex gap-4 items-center justify-between border-4 border-dotted border-teal-500 p-3">
        <FileInput type='file' accept='images/*' onChange={(e)=> setFile(e.target.files[0])} />
        <Button className='focus:ring-0' type='button' onClick={handleauploadImage} gradientDuoTone='purpleToBlue' outline disabled={imageUploudProgress}>
          {imageUploudProgress ? 
          (
            <div className='w-16 h-16'>
              <CircularProgressbar value={imageUploudProgress} text={`${imageUploudProgress || 0}%`}/>
            </div>
          ) : 'Upload Image'}
        </Button>
        
      </div>
      {
          formData.image &&
          (
            <img src={formData.image} alt='Upload' className='w-full h-72 object-cover' />
          )
        }
      {imageUploadError && <Alert color='failure'>{imageUploadError}</Alert>}
      {fetchError && <Alert color='failure'>{fetchError}</Alert>}
      <ReactQuill value={formData.content1} theme='snow' placeholder='Write something' className='h-72 mb-12' required onChange={(value)=> setFormData({...formData, content1:value})}/>
      <ReactQuill value={formData.content2} theme='snow' placeholder='Write something' className='h-72 mb-12' required onChange={(value)=> setFormData({...formData, content2:value})}/>
      <Button className='focus:ring-0' gradientDuoTone='purpleToPink' type='submit'>Update Post</Button>
      </form>
    </div>
  )
}




<div>



<div className='min-h-screen'>
  <div>
  <div className='flex flex-col gap-3 py-8 md:py-20 px-3 max-w-6xl mx-auto'>
<h1 className='text-3xl font-bold lg:text-6xl'>Welcome to Comrade Trends!</h1>
<p className='text-gray-500 text-xs sm:text-sm'>At Comrade Trends, we're your trusted source for the latest news, insightful analysis, and trending stories from around the world.</p>
</div>
  </div>
    <div className='flex justify-center m-3'>
    <CallToAction/>
    </div>
    <div className='max-w-6xl mx-auto p-3 flex flex-col gap-8 py-7'>
      {breaking && breaking.length > 0 && 
        <div className='flex flex-col gap-6'>
        <h1 className=' text-2xl font-semibold text-center'>Breaking News</h1>
        <div className='flex justify-center flex-wrap gap-4'>
          {breaking.map((post)=>(
            <PostBar post={post} key={post._id}/>
          ))}
        </div>
      </div>
      }
      {trending && trending.length > 0 &&
      (
        <>
          <div className='flex flex-col gap-6'>
          <h1 className=' text-2xl font-semibold text-center'>Trending News</h1>
          <div className='flex justify-center flex-wrap gap-4'>
            {trending.map((post)=>(
              <PostBar post={post} key={post._id}/>
            ))}
          </div>
        </div>
        </>
      )}
    </div>
    <div>
    <div className='flex flex-col items-center'>
    {recent && recent.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Recent Posts</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {recent.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    {sports && sports.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Sports</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {sports.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    {politics && politics.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Politics</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {politics.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    </div>
    </div>
    <div className=' mb-5 text-xl text-center hover:underline text-teal-500'>
    <Link  to='/search '>
      View All Posts
    </Link>
    </div>
   </div>

   <div>
   <head>
    <title>Suspects in murder at Shiners Boys High School to sit KCSE exams in custody</title>
    <meta data-n-head="ssr" charset="utf-8"/>
    <meta data-n-head="ssr" name="msapplication-TileColor" content="#da532c"/>
    <meta data-n-head="ssr" name="theme-color" content="#da532c"/>
    <meta data-n-head="ssr" name="viewport" content="width=device-width, initial-scale=1"/>
    <meta data-n-head="ssr" name="robots" content="index, follow"/>
    <meta data-n-head="ssr" data-hid="og:site_name" property="og:site_name" content="Citizen Digital"/>
    <meta data-n-head="ssr" data-hid="og:locale" property="og:locale" content="en"/>
    <meta data-n-head="ssr" data-hid="fb:app_id" property="fb:app_id" content="1773843079528698"/>
    <meta data-n-head="ssr" data-hid="og:locale:alternate" property="og:locale:alternate" content="en_KE"/>
    <meta data-n-head="ssr" data-hid="twitter:site" name="twitter:site" content="@citizentvkenya"/>
    <meta data-n-head="ssr" data-hid="twitter:card" name="twitter:card" content="summary_large_image"/>
  </head>
   </div>

   <div>
    <title>Biden says he has pardoned his son, Hunter</title>
    <meta data-n-head="ssr" charset="utf-8"/>
    <meta data-n-head="ssr" name="msapplication-TileColor" content="#da532c"/>
    <meta data-n-head="ssr" name="theme-color" content="#da532c"/>
    <meta data-n-head="ssr" name="viewport" content="width=device-width, initial-scale=1"/>
    <meta data-n-head="ssr" name="robots" content="index, follow"/>
    <meta data-n-head="ssr" data-hid="description" name="description" content="U.S. President Joe Biden said he had pardoned his son, Hunter Biden, who had been convicted of making false statements on a gun background check and illegally possessing a firearm and pled guilty to federal tax charges."/>
    <meta data-n-head="ssr" data-hid="keywords" name="keywords" content="Joe Biden, Citizen Digital, Hunter Biden"/>
    <meta data-n-head="ssr" data-hid="og:site_name" property="og:site_name" content="Citizen Digital"/>
    <meta data-n-head="ssr" data-hid="og:title" property="og:title" content="Biden says he has pardoned his son, Hunter"/>
    <meta data-n-head="ssr" data-hid="og:description" property="og:description" content="U.S. President Joe Biden said he had pardoned his son, Hunter Biden, who had been convicted of making false statements on a gun background check and illegally possessing a firearm and pled guilty to federal tax charges."/>
    <meta data-n-head="ssr" data-hid="og:locale" property="og:locale" content="en"/>
    <meta data-n-head="ssr" data-hid="fb:app_id" property="fb:app_id" content="1773843079528698"/>
    <meta data-n-head="ssr" data-hid="og:locale:alternate" property="og:locale:alternate" content="en_KE"/>
    <meta data-n-head="ssr" data-hid="og:type" property="og:type" content="article"/>
    <meta data-n-head="ssr" data-hid="og:url" property="og:url" content="https://www.citizen.digital/news/biden-says-he-has-pardoned-his-son-hunter-n353868"/>
    <meta data-n-head="ssr" data-hid="og:image" property="og:image" content="https://citizentv.obs.af-south-1.myhuaweicloud.com/140121/conversions/Biden-og_image.webp"/>
    <meta data-n-head="ssr" data-hid="og:image:alt" property="og:image:alt" content="Biden says he has pardoned his son, Hunter"/>
    <meta data-n-head="ssr" data-hid="twitter:url" name="twitter:url" content="https://www.citizen.digital/news/biden-says-he-has-pardoned-his-son-hunter-n353868"/>
    <meta data-n-head="ssr" data-hid="twitter:title" name="twitter:title" content="Biden says he has pardoned his son, Hunter"/>
    <meta data-n-head="ssr" data-hid="twitter:description" name="twitter:description" content="U.S. President Joe Biden said he had pardoned his son, Hunter Biden, who had been convicted of making false statements on a gun background check and illegally possessing a firearm and pled guilty to federal tax charges."/>
    <meta data-n-head="ssr" data-hid="twitter:image" name="twitter:image" content="https://citizentv.obs.af-south-1.myhuaweicloud.com/140121/conversions/Biden-og_image.webp"/>
    <meta data-n-head="ssr" data-hid="twitter:site" name="twitter:site" content="@citizentvkenya"/>
    <meta data-n-head="ssr" data-hid="twitter:card" name="twitter:card" content="summary_large_image"/>
    <meta data-n-head="ssr" data-hid="article:published_time" property="article:published_time" content="2024-12-02 07:08:40"/>
    <meta data-n-head="ssr" data-hid="article:modified_time" property="article:modified_time" content="2024-12-02 12:21:09"/>
    <meta data-n-head="ssr" data-hid="article:tag" property="article:tag" content="Joe Biden, Citizen Digital, Hunter Biden"/>
    <meta data-n-head="ssr" name="twitter:label1" content="Written by"/>
    <meta data-n-head="ssr" name="twitter:data1" content="Reuters"/>
    <meta data-n-head="ssr" name="twitter:label2" content="Filed under"/>
    <meta data-n-head="ssr" name="twitter:data2" content="Joe Biden, Citizen Digital, Hunter Biden"></meta>
   </div>

</div>



if (technology.length === 0) {
setShouldCollapsetechnology(true);
} else {
setShouldCollapsetechnology(false);
}
if (recent.length === 0) {
} else {
setShouldCollapserecent(false);
}
if (business.length === 0) {
setShouldCollapsebusiness(true);
} else {
setShouldCollapsebusiness(false);
}
if (climate.length === 0) {
setShouldCollapseclimate(true);
} else {
setShouldCollapseclimate(false);
} 
if (education.length === 0) {
  setShouldCollapseeducation(true);
} else {
  setShouldCollapseeducation(false);
}
if (general.length === 0) {
setShouldCollapsegeneral(true);
} else {
setShouldCollapsegeneral(false);
} 
if (health.length === 0) {
setShouldCollapsehealth(true);
} else {
setShouldCollapsehealth(false);
}  
if (entertainment.length === 0) {
setShouldCollapseentainment(true);
} else {
setShouldCollapseentainment(false);
}  





useEffect(() => {
   
}, [technology]);
useEffect(() => {
 
}, [recent]);
useEffect(() => {
  
}, [business]);
useEffect(() => {
 
}, [climate]);
useEffect(() => {
  
}, [education]);
useEffect(() => {
  
}, [general]);
useEffect(() => {
 
}, [health]);
useEffect(() => {
 
}, [entertainment]);

















import React, { useEffect, useState,useRef } from "react";
import { Link } from "react-router-dom";
import { PostBar } from "../components/PostBar.jsx";
import { HomePostCard } from "../components/HomePostCard.jsx";
import { useNavigate } from "react-router-dom";
import { PostCard } from "../components/PostCard.jsx";
import { Spinner } from "flowbite-react";
import { Helmet } from "react-helmet";

export function Home() {
  const navigate = useNavigate();
  const [trending, setTrending] = useState([]);
  const [breaking, setBreaking] = useState([]);
  const [mostTrending, setMostTrending] = useState([]);
  const [recent, setRecent] = useState([]);
  const [sports, setSports] = useState([]);
  const [politics, setPolitics] = useState([]);
  const [international, setInternational] = useState([]);
  const [entertainment, setEntertainment] = useState([]);
  const [business, setBusiness] = useState([]);
  const [technology, setTechnology] = useState([]);
  const [health, setHealth] = useState([]);
  const [climate, setClimate] = useState([]);
  const [general, setGeneral] = useState([]);
  const [education, setEducation] = useState([]);
  const [flexDirection,setFlexDirection] = useState("");
  const [width,setWidth] = useState(window.innerWidth);
  const [shouldCollapseentainment, setShouldCollapseentainment] = useState(false);
  const [shouldCollapsetechnology, setShouldCollapsetechnology] = useState(false);
  const [shouldCollapsebusiness, setShouldCollapsebusiness] = useState(false);
  const [shouldCollapsehealth, setShouldCollapsehealth] = useState(false);
  const [shouldCollapseeducation, setShouldCollapseeducation] = useState(false);
  const [shouldCollapseclimate, setShouldCollapseclimate] = useState(false);
  const [shouldCollapsegeneral, setShouldCollapsegeneral] = useState(false);
  const [shouldCollapserecent, setShouldCollapserecent] = useState(false);
  
  const [loadedSections, setLoadedSections] = useState({
    //politics: false,
    //international: false,
    entertainment: false,
    business: false,
    technology: false,
    health: false,
    education: false,
    climate: false,
    general:false,
    recent: false,
  });
  // Refs to observe sections
  //const politicsRef = useRef(null);
  //const internationalRef = useRef(null);
  const recentRef = useRef(null);
  const entertainmentRef = useRef(null);
  const businessRef = useRef(null);
  const technologyRef = useRef(null);
  const healthRef = useRef(null);
  const climateRef = useRef(null);
  const generalRef = useRef(null);
  const educationRef = useRef(null);

  // Function to fetch data
  const loadPosts = async (category, setter, key) => {
    if (loadedSections[key]) return; // Prevent duplicate calls

    try {
      const res = await fetch(
        category ? `/api/post/getposts?category=${category}&limit=3` : `/api/post/getposts?limit=3`
      );
      const data = await res.json();
      setter(data.posts);
      setLoadedSections((prev) => ({ ...prev, [key]: true })); // Mark section as loaded
    } catch (error) {
      console.error(`Error fetching ${key} posts:`, error);
    }
  };
const checkLength = ()=>{
  useEffect(() => {
    if (technology.length === 0) {
      setShouldCollapsetechnology(true);
    } else {
      setShouldCollapsetechnology(false);
    }
  }, [technology]);
  useEffect(() => {
    if (recent.length === 0) {
      setShouldCollapserecent(true);
    } else {
      setShouldCollapserecent(false);
    }
  }, [recent]);
  useEffect(() => {
    if (business.length === 0) {
      setShouldCollapsebusiness(true);
    } else {
      setShouldCollapsebusiness(false);
    }
  }, [business]);
  useEffect(() => {
    if (climate.length === 0) {
      setShouldCollapseclimate(true);
    } else {
      setShouldCollapseclimate(false);
    }
  }, [climate]);
  useEffect(() => {
    if (education.length === 0) {
      setShouldCollapseeducation(true);
    } else {
      setShouldCollapseeducation(false);
    }
  }, [education]);
  useEffect(() => {
    if (general.length === 0) {
      setShouldCollapsegeneral(true);
    } else {
      setShouldCollapsegeneral(false);
    }
  }, [general]);
  useEffect(() => {
    if (health.length === 0) {
      setShouldCollapsehealth(true);
    } else {
      setShouldCollapsehealth(false);
    }
  }, [health]);
  useEffect(() => {
    if (entertainment.length === 0) {
      setShouldCollapseentainment(true);
    } else {
      setShouldCollapseentainment(false);
    }
  }, [entertainment]);
}
  // IntersectionObserver to watch for scrolling
  useEffect(() => {
    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          /*if (entry.target === politicsRef.current) {
            loadPosts("politics", setPolitics, "politics");
          }
          if (entry.target === internationalRef.current) {
            loadPosts("international", setInternational, "international");
          }*/
          if (entry.target === entertainmentRef.current) {
            loadPosts("entertainment", setEntertainment, "entertainment");
          }
          if (entry.target === businessRef.current) {
            loadPosts("business", setBusiness, "business");
          }
          if (entry.target === technologyRef.current) {
            loadPosts("technology", setTechnology, "technology");
          }
          if (entry.target === healthRef.current) {
            loadPosts("health", setHealth, "health");
          }
          if (entry.target === climateRef.current) {
            loadPosts("climate", setClimate, "climate");
          }
          if (entry.target === generalRef.current) {
            loadPosts("general", setGeneral, "general");
          }
          if (entry.target === educationRef.current) {
            loadPosts("education", setEducation, "education");
          }
          if (entry.target === recentRef.current) {
            loadPosts("", setRecent, "recent"); // Empty category fetches recent posts
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, { threshold: 0.2 });

    //if (politicsRef.current) observer.observe(politicsRef.current);
    //if (internationalRef.current) observer.observe(internationalRef.current);
    if (entertainmentRef.current) observer.observe(entertainmentRef.current);
    if (businessRef.current) observer.observe(businessRef.current);
    if (technologyRef.current) observer.observe(technologyRef.current);
    if (healthRef.current) observer.observe(healthRef.current);
    if (climateRef.current) observer.observe(climateRef.current);
    if (generalRef.current) observer.observe(generalRef.current);
    if (recentRef.current) observer.observe(recentRef.current);
    if (educationRef.current) observer.observe(educationRef.current);

    return () => {
      /*if (politicsRef.current) observer.unobserve(politicsRef.current);
      if (internationalRef.current) observer.unobserve(internationalRef.current);*/
      if (entertainmentRef.current) observer.unobserve(entertainmentRef.current);
      if (businessRef.current) observer.unobserve(businessRef.current);
      if (technologyRef.current) observer.unobserve(technologyRef.current);
      if (healthRef.current) observer.unobserve(healthRef.current);
      if (climateRef.current) observer.unobserve(climateRef.current);
      if (generalRef.current) observer.unobserve(generalRef.current);
      if (educationRef.current) observer.unobserve(educationRef.current);
      if (recentRef.current) observer.unobserve(recentRef.current);
    };
  }, [loadedSections]);
  
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch("/api/post/getposts?limit=3&category=politics");
      const data = await res.json();
      setPolitics(data.posts);
    };
    fetchPosts();
  }, []);
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch(
        "/api/post/getposts?limit=3&category=international"
      );
      const data = await res.json();
      setInternational(data.posts);
    };
    fetchPosts();
  }, []);
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch("/api/post/getposts?category=trending&limit=3");
      const data = await res.json();
      setTrending(data.posts);
    };
    fetchPosts();
  }, []);

  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch("/api/post/getposts?category=breaking&limit=3");
      const data = await res.json();
      setBreaking(data.posts);
    };
    fetchPosts();
  }, []);
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch(
        "/api/post/getposts?category=most-trending&limit=1"
      );
      const data = await res.json();
      setMostTrending(data.posts);
    };
    fetchPosts();
  }, []);
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch("/api/post/getposts?limit=3");
      const data = await res.json();
      setRecent(data.posts);
    };
    fetchPosts();
  }, []);
  
  useEffect(() => {
    const fetchPosts = async () => {
      const res = await fetch("/api/post/getposts?limit=3&category=sports");
      const data = await res.json();
      setSports(data.posts);
    };
    fetchPosts();
  }, []);
  
 

  useEffect(() => { 
    const handleResize = () => {
       if (window.innerWidth > width) { 
        setWidth(window.innerWidth);
       } };
        window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize); }; }, 
    [width]);

  useEffect(()=>{
    const style = getComputedStyle(document.getElementById("parent"));
    const direction = style.flexDirection;
    setFlexDirection(direction)
  },[width])
checkLength()
  

  return (
    <div className="flex flex-col my-5 mx-2 lg:mx-10 min-h-screen">
      <Helmet>
        <title>{`ComradeTrends | Home Page`}</title>
        <meta
          name="description"
          content="We're your trusted source for the latest news, insightful analysis, and trending stories from around the world."
        />
        <meta
          name="keywords"
          content="trusted source for the latest news, insightful analysis, and trending stories in Kenya and from around the world."
        />
      </Helmet>
      <div id="parent" className="flex flex-col md:flex-row gap-2">
        <div className="md:w-1/2 text-center">
          {breaking && breaking.length > 0 ? (
            <div
              onClick={() => navigate(`/post/${breaking[0].slug}`)}
              className="!sm:w-1/2 h-auto hover:cursor-pointer w-full flex"
            >
              <HomePostCard key={breaking[0]._id} post={breaking[0]} />
            </div>
          ) : (
            <div></div>
          )}
          {mostTrending && mostTrending.length > 0 && breaking.length === 0 ? (
            <div
              onClick={() => navigate(`/post/${mostTrending[0].slug}`)}
              className="!sm:w-1/2 h-auto hover:cursor-pointer w-full flex"
            >
              <HomePostCard key={mostTrending[0]._id} post={mostTrending[0]} />
            </div>
          ) : (
            <div></div>
          )}
          {recent && recent.length > 0 && mostTrending.length == 0 ? (
            <div
              onClick={() => navigate(`/post/${recent[0].slug}`)}
              className="!sm:w-1/2 h-auto hover:cursor-pointer w-full flex"
            >
              <HomePostCard key={recent[0]._id} post={recent[0]} />
            </div>
          ) : (
            <div></div>
          )}
        </div>
        {recent.length === 0 &&
        mostTrending.length === 0 &&
        breaking.length === 0 ? (
          <div className="min-h-screen">
            <div className="flex flex-col gap-3 items-center justify-center py-8 md:py-20 px-3 max-w-6xl mx-auto">
              <h1 className="text-3xl font-bold md:text-nowrap lg:text-6xl">
                Welcome to Comrade Trends!
              </h1>
              <p className="text-gray-500 text-xs sm:text-sm">
                At Comrade Trends, we're your trusted source for the latest
                news, insightful analysis, and trending stories from around the
                world.
              </p>
              <Spinner className="self-center m-10" />
            </div>
          </div>
        ) : (
          <div></div>
        )}
        <div className="flex md:flex-row md:w-1/2 gap-2 flex-col">
          <div className="md:w-1/2 w-full">
            {trending && trending.length > 0 && (
              <>
                <div className="flex flex-col gap-6">
                  <h1 className=" text-2xl font-semibold text-center">
                    Trending News
                  </h1>
                  <div className="flex justify-center flex-wrap gap-4">
                    {trending.map((post) => (
                      <PostBar post={post} key={post._id} />
                    ))}
                  </div>
                </div>
              </>
            )}
          </div>
          {breaking && breaking.length > 0 ? (
            <div className="md:w-1/2 w-full">
              <div className="flex flex-col gap-6">
                <h1 className=" text-2xl font-semibold text-center">
                  Breaking News
                </h1>
                <div className="flex justify-center flex-wrap gap-4">
                  {breaking.map((post) => (
                    <PostBar post={post} key={post._id} />
                  ))}
                </div>
              </div>
            </div>
          ) : (
           <div className="md:w-1/2 w-full">
              {sports && sports.length > 0 ? (
                <div className="flex flex-col  gap-6">
                  <h1 className=" text-2xl font-semibold text-center">
                    Sports News
                  </h1>
                  <div className="flex justify-center flex-wrap gap-4">
                    {sports.map((post) => (
                      <PostBar post={post} key={post._id} />
                    ))}
                  </div>
                </div>
              ) : (
                <div></div>
              )}
            </div>
          )}
        </div>
      </div>
    <div className="flex flex-col my-5 mx-2 lg:mx-10 min-h-screen">
      
      {/* Politics Section */}
      
        {politics.length > 0 ? (
        <div className="flex flex-col justify-center items-center">
          <h1 className="text-2xl font-semibold">Politics</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {politics.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=politics" className="text-teal-500 hover:underline">
          More Politics News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      

      {/* International Section */}
      
        {international.length > 0 ? (
        <div className="flex flex-col justify-center items-center">
          <h1 className="text-2xl font-semibold">International News</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {international.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=international" className="text-teal-500 hover:underline">
          More International News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      

      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapseentainment ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {entertainment.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Entertainment</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {entertainment.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=entertainment" className="text-teal-500 hover:underline">
          More Entertainment News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapsetechnology ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {technology.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Technology</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {technology.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=technology" className="text-teal-500 hover:underline">
          More Technology News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapseeducation ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {education.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Education</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {education.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=education" className="text-teal-500 hover:underline">
          More Education News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapseclimate ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {climate.length > 0 ? (
      <div>
          <h1 className="text-2xl font-semibold">Climate</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {climate.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=climate" className="text-teal-500 hover:underline">
          More Climate News
        </Link>
      </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapsehealth ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {health.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Health</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {health.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=health" className="text-teal-500 hover:underline">
          More Health News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapsegeneral ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {general.length > 0 ? (
       <div>
         <h1 className="text-2xl font-semibold">General News</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {general.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=general" className="text-teal-500 hover:underline">
          More General News
        </Link>
       </div>
        ) : (
          <div></div>
        )}
      </div>
      {/* Entertainment Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapsebusiness ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {business.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Business</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {business.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        <Link to="/search?category=business" className="text-teal-500 hover:underline">
          More Business News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>

      {/* Recent Posts Section */}
      <div
      className={`flex flex-col gap-3 text-center transition-all duration-300 ${
        shouldCollapserecent ? "h-0 overflow-hidden" : "min-h-[200px]"
      }`}
    >
        {recent.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Recent Posts</h1>
          <div className="flex justify-center flex-wrap gap-1">
            {recent.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
        </div>
        ) : (
          <Spinner />
        )}
      </div>
    </div>
      
      <div className=" mb-5 text-xl text-center hover:underline text-teal-500">
        <Link to="/search ">View All Posts</Link>
      </div>
    </div>
  );
}




<div>
<option value="people">People</option>
            <option value="general">General</option>
            <option value="technology">Technology</option>
                    <div className="hidden lg:sticky lg:py-4 lg:px-1 lg:justify-center lg:items-center lg:flex lg:flex-col lg:mb-10 lg:mx-1 md:top-20">
                      <div>
                      <FaShareFromSquare className="w-6 h-6"/>
                      <h1 className="">Share</h1>
                      </div>
                     <div className=" border w-16 dark:bg-slate-900 bg-slate-400 justify-between items-center border-gray-600 rounded-md py-5 gap-10 px-1 flex flex-col ">
                     <div>
                     <FacebookShareButton
                        url={currentPageURL}
                        quote={post.title}
                        hashtag="#ComradeTrends"
                      >
                        <CiFacebook fill="rgb(74,70,70)" className="text-3xl hover:fill-slate-300" />
                      </FacebookShareButton>
                     </div>
                      <div>
                      <TwitterShareButton url={currentPageURL}>
                        <FaXTwitter fill="rgb(74,70,70)" className="text-2xl hover:fill-slate-300" />
                      </TwitterShareButton>
                      </div>
                     <div>
                     <WhatsappShareButton
                        url={currentPageURL}
                        separator="::"
                        title={post.title}
                      >
                        <FaWhatsapp fill="rgb(74,70,70)" className="text-2xl hover:fill-slate-300" />
                      </WhatsappShareButton>
                     </div>
                     <div>
                      <TelegramShareButton
                        title={post.title}
                        url={currentPageURL}
                      >
                        <FaTelegramPlane fill="rgb(74,70,70)" className="text-2xl hover:fill-slate-300" />
                      </TelegramShareButton>
                     </div>
                     <div className="flex flex-col justify-center items-center">
                      <FaLink onClick={handleCopyLink} fill="rgb(74,70,70)" className="text-2xl hover:fill-slate-300 hover:cursor-pointer"/>
                      {copied && (
                    <span className={`
                      text-sm text-green-500 mt-1 transition-opacity duration-500
                      ${copied ? 'opacity-100' : 'opacity-0'}
                    `}>
                      Copied!
                    </span>
                  )}
                     </div>
                     </div>
                    </div>
                          <div ref={entertainmentRef} className={`flex flex-col gap-3 min-h-[200px] text-center ${(entertainment.length === 0) && "!min-h-override"}`}>
                            {entertainment.length > 0 ? (
                            <div>
                              <h1 className="text-2xl font-semibold">Entertainment</h1>
                              <div className=" overflow-x-scroll overflow-y-hidden p-1 flex w-full scrollbar-thin 2xl:justify-center scrollbar-thumb-transparent gap-2 scrollbar-track-transparent justify-between  items-center ">
                              <div className="flex flex-col gap-2 justify-around sm:flex-row items-center"> 
                                {entertainment.map((post) => <PostCard key={post._id} post={post} />)}
                              </div>
                              </div>
                            <Link to="/search?category=entertainment" className="text-teal-500 hover:underline">
                              More Entertainment News
                            </Link>
                            </div>
                            ) : (
                              <div></div>
                            )}
                          </div>

                                  {international.length > 0 ? (
                                  <div className="flex flex-col justify-center items-center">
                                    <h1 className="text-2xl font-semibold">International News</h1>
                                    <div className=" overflow-x-scroll overflow-y-hidden p-1 flex w-full scrollbar-thin 2xl:justify-center scrollbar-thumb-transparent gap-2 scrollbar-track-transparent justify-between  items-center ">
                                    <div className="flex flex-col gap-2 justify-around sm:flex-row items-center"> 
                                      {international.map((post) => <PostCard key={post._id} post={post} />)}
                                    </div>
                                    </div>
                                  <Link to="/search?category=international" className="text-teal-500 hover:underline">
                                    More International News
                                  </Link>
                                  </div>
                                  ) : (
                                    <div></div>
                                  )}
       {international.length > 0 ? (
        <div className="flex flex-col justify-center items-center">
          <h1 className="text-2xl font-semibold">International News</h1>
          <div className=" overflow-x-scroll overflow-y-hidden p-1 flex w-full scrollbar-thin 2xl:justify-center scrollbar-thumb-transparent gap-2 scrollbar-track-transparent justify-between  items-center ">
                    <div className="flex w-full sm:w-auto flex-col gap-2 justify-around sm:flex-row items-center"> 
 
            {international.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
          </div>
        <Link to="/search?category=international" className="text-teal-500 hover:underline">
          More International News
        </Link>
        </div>
        ) : (
          <div></div>
        )}




      {/* Entertainment Section */}
      <div className={`flex flex-col min-h-[200px] gap-3 text-center ${ (politics.length === 0) && "!min-h-override"}`}>

        {politics.length > 0 ? (
        <div>
          <h1 className="text-2xl font-semibold">Politics</h1>
          <div className=" overflow-x-scroll overflow-y-hidden p-1 flex w-full scrollbar-thin 2xl:justify-center scrollbar-thumb-transparent gap-2 scrollbar-track-transparent justify-between  items-center ">
          <div className="flex w-full sm:w-auto flex-col gap-2 justify-around sm:flex-row items-center"> 
            {politics.map((post) => <PostCard key={post._id} post={post} />)}
          </div>
          </div>
        <Link to="/search?category=politics" className="text-teal-500 hover:underline">
          More Politics News
        </Link>
        </div>
        ) : (
          <div></div>
        )}
      </div>





      <Helmet>
          {/* Dynamic Page Title */}
          <title>{post ? `Comrade Trends | ${post.title}` : "Comrade Trends"}</title>
          <meta name="description" content={post?.title || "Stay updated with Comrade Trends."} />

          {/* âœ… Open Graph Meta Tags â€” used by Facebook, Telegram, LinkedIn, etc. */}
          <meta property="og:type" content="article" />
          <meta property="og:url" content={currentUrl} />
          <meta property="og:title" content={post?.title || "Comrade Trends"} />
          <meta property="og:description" content={post?.title || "Latest from Comrade Trends"} />
          {post?.image && (
            <>
              <meta property="og:image" content={post.image} />
              <meta property="og:image:type" content="image/jpeg" />
              <meta property="og:image:width" content="1200" />
              <meta property="og:image:height" content="630" />
            </>
          )}

          {/* âœ… Twitter (X) Meta Tags */}
          <meta name="twitter:card" content="summary_large_image" />
          <meta name="twitter:site" content="@comradetrends" />
          <meta name="twitter:creator" content="@comradetrends" />
          <meta name="twitter:url" content={currentUrl} />
          <meta name="twitter:title" content={post?.title || "Comrade Trends"} />
          <meta name="twitter:description" content={post?.title || "Stay informed with Comrade Trends."} />
          {post?.image && <meta name="twitter:image" content={post.image} />}
        </Helmet>

        <Helmet>
        {/* Dynamic Page Title */}
        <title>{post ? `Comrade Trends | ${post.title}` : "Comrade Trends"}</title>
        <meta name="description" content={post?.title || "Stay updated with Comrade Trends."} />

        {/* âœ… Open Graph Meta Tags â€” used by Facebook, Telegram, LinkedIn, etc. */}
        <meta property="og:type" content="article" />
        <meta property="og:url" content={currentUrl} />
        <meta property="og:title" content={post?.title || "Comrade Trends"} />
        <meta property="og:description" content={post?.title || "Latest from Comrade Trends"} />
        {post?.image && (
          <>
            <meta property="og:image" content={post.image} />
            <meta property="og:image:type" content="image/jpeg" />
            <meta property="og:image:width" content="1200" />
            <meta property="og:image:height" content="630" />
          </>
        )}

        {/* âœ… Twitter (X) Meta Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@comradetrends" />
        <meta name="twitter:creator" content="@comradetrends" />
        <meta name="twitter:url" content={currentUrl} />
        <meta name="twitter:title" content={post?.title || "Comrade Trends"} />
        <meta name="twitter:description" content={post?.title || "Stay informed with Comrade Trends."} />
        {post?.image && <meta name="twitter:image" content={post.image} />}
      </Helmet>
























</div>












