 <form onSubmit={handleSubmit}>
       <div className='flex flex-col  gap-2' >
          <div className='flex  items-center gap-2'>
            <label className='whitespace-nowrap ml-4 font-semibold'>
              Term:
            </label>
            <TextInput
              placeholder='Search...'
              id='searchTerm'
              type='text'
              value={sidebarData.searchTerm}
              onChange={handleChange}
              className='w-64'
            />
          </div>
          <div className='flex sm:flex-col gap-2 justify-around'>
            <div className='flex sm:flex items-center gap-2'>
              <label className='font-semibold'>Sort:</label>
              <Select className='sm:w-64' onChange={handleChange} value={sidebarData.sort} id='sort'>
                <option value='desc'>Latest</option>
                <option value='asc'>Oldest</option>
              </Select>
            </div>
            <div className='flex items-center gap-2'>
              <label className='font-semibold'>Category:</label>
              <Select
                onChange={handleChange}
                value={sidebarData.category}
                id='category'
                className='w-24 sm:w-52'
              >
                <option value='uncategorized'>Select category</option>
            <option value='sports'>sports</option>
            <option value='business'>business</option>
            <option value='health'>health</option>
            <option value='politics'>politics</option>
            <option value='entertainment'>entertainment</option>
            <option value='general'>general</option>
            <option value='Technology'>technology</option>
            <option value='international'>international</option>
            <option value='education'>education</option>
              </Select>
            </div>
          </div>

        </div>
        <div className=' flex justify-center'>
        <Button className='mt-2 self-center focus:ring-0' type='submit' outline gradientDuoTone='purpleToPink'>
          Apply Filters
        </Button>
        </div>
       </form>





"use client";

import { Button, Modal } from "flowbite-react";
import { useState } from "react";

export function Component() {
  const [openModal, setOpenModal] = useState(true);

  return (
    <>
      <Button onClick={() => setOpenModal(true)}>Toggle modal</Button>
      <Modal dismissible show={openModal} onClose={() => setOpenModal(false)}>
        <Modal.Header>Terms of Service</Modal.Header>
        <Modal.Body>
          <div className="space-y-6">
            <p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">
              With less than a month to go before the European Union enacts new consumer privacy laws for its citizens,
              companies around the world are updating their terms of service agreements to comply.
            </p>
            <p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">
              The European Unionâ€™s General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant
              to ensure a common set of data rights in the European Union. It requires organizations to notify users as
              soon as possible of high-risk data breaches that could personally affect them.
            </p>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button onClick={() => setOpenModal(false)}>I accept</Button>
          <Button color="gray" onClick={() => setOpenModal(false)}>
            Decline
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
}



<Popover  className='flex justify-center mt-7 w-full'
        aria-labelledby="default-popover" theme='base'
        open={open}
        onOpenChange={SetOpen}
        content={
        <form className='w-full backdrop-blur flex-none transition-colors duration-500  border border-b-slate-500 rounded-bl-lg rounded-br-lg bg-slate-300 supports-backdrop-blur:bg-white/95 h-64 rounded-lg dark:bg-slate-900/95'>
          <div className='flex mx-2 items-center gap-2 justify-center'>
          <Button.Group className='flex mt-2 w-full justify-start gap-0 items-center'>
            <input className='rounded-3xl bg-slate-300 h-10 rounded-r-none dark:bg-slate-800 w-full'
              placeholder='Search...'
              type='text'
              value={searchTerm}
              onChange={(e)=>setSearchTerm(e.target.value)}
           />
           <div className="w-12 border flex justify-center items-center border-gray-500 rounded-lg rounded-l-none border-l-0 dark:bg-slate-800 h-10"><MdOutlineClear onClick={()=>setSearchTerm('')} className='w-5 h-5'/></div>
          </Button.Group>
          <div className='flex mt-2  items-center'>
          <div className='border dark:bg-slate-800 border-slate-500 h-10 w-10 flex justify-center items-center rounded-2xl' onClick={handleSubmit}><AiOutlineSearch className='w-5 hover:cursor-pointer  h-5'/></div>
          </div>
          </div>
        </form>
      }
      arrow={false}
    >
      {path === '/search' ? (<div></div>) : <div><AiOutlineSearch onClick={()=>SetOpen(!open)} className='w-5 h-5 text-slate-400'/></div>}
    </Popover>




import { Alert, Button, FileInput, Select, TextInput } from 'flowbite-react'
import { useEffect, useState } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import {getDownloadURL, getStorage, ref, uploadBytesResumable} from 'firebase/storage';
import {app} from '../firebase'
import {CircularProgressbar} from 'react-circular-progressbar'
import 'react-circular-progressbar/dist/styles.css';
import { useNavigate,useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';

export default function UpdatePost() {
  const {currentUser} = useSelector(state=>state.user)
  const navigate = useNavigate();
  const [file,setFile] = useState(null);
  const [imageUploudProgress,setImageUploudProgress] = useState(null);
  const [imageUploadError,setImageUploadError] = useState(null);
  const [formData,setFormData] = useState({});
  const [fetchError,setFetchError] = useState()
  const {postId} = useParams()
  console.log(formData.content1)

  useEffect(()=>{
    try{
      const fetchPosts = async ()=>{
        const res = await fetch(`/api/post/getposts?postId=${postId}`);
        const data = await res.json();
       
        if(!res.ok){
          console.log(data.message)
          setFetchError(data.message)
          return;
        }
        if(res.ok){
          console.log(data.posts[0].image)
          setFetchError(null);
          setFormData(data.posts[0])
        }
      }
      fetchPosts();
    }
   
    catch(err){
      console.log(err)
    }
  },[postId])
 

  const handleauploadImage = async()=>{
    try{
      if(!file){
        setImageUploadError("please Select an image")
        return;
      }
      setImageUploadError(null)
      const storage = getStorage(app);
      const fileName = new Date().getTime() + '-' + file.name;
      const storageRef = ref(storage,fileName);
      const uploadTask = uploadBytesResumable(storageRef,file);
      uploadTask.on(
        'state_changed',
        (snapshot)=>{
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          setImageUploudProgress(progress.toFixed(0))
        },
        (error)=>{
          setImageUploadError('image Upload failed');
          setImageUploudProgress(null);
          
        },
        ()=>{
          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL)=>{
           setImageUploudProgress(null);
           setImageUploadError(null);
           setFormData({...formData, image: downloadURL})
          });
        },
      );
      
    }
    catch(err){
      setImageUploadError("image upload failed");
      setImageUploudProgress(null);
      console.log(err)
    }
  }
  const handleSubmit = async (e)=>{
    e.preventDefault();
    try{
      const res = await fetch(`/api/post/updatepost/${formData._id}/${currentUser._id}`, {
        method:'PUT',
        headers: {'Content-Type' : 'application/json'},
        body: JSON.stringify(formData)
      });
      const data = await res.json();
      if(!res.ok){
        setFetchError(data.message);
        return;
      }
      if(res.ok){
        setFetchError(null);
        navigate(`/post/${data.slug}`)
      }
    }catch(err){
      setFetchError('Something went wrong.')
    }
  }
  return (
    <div className='p-3 mx-auto max-w-3xl min-h-screen'>
      <h1 className='text-center font-semibold text-3xl my-7'>Update Post</h1>
      <form className='flex flex-col gap-4' onSubmit={handleSubmit}>
      <div className='flex flex-col gap-4 sm:flex-row justify-between'>
        <TextInput  value={formData.title} required placeholder='Title' id='title' className='flex-1' onChange={(e)=> setFormData({...formData, title: e.target.value})}/>
        <Select value={formData.category} onChange={(e)=> setFormData({...formData, category: e.target.value})}>
        <option value='uncategorized'>Select category</option>
          <option value='sports'>Sports</option>
          <option value='business'>Business</option>
          <option value='health'>Health</option>
          <option value='health'>People</option>
          <option value='politics'>Politics</option>
          <option value='entertainment'>Entertainment</option>
          <option value='general'>General</option>
          <option value='Technology'>Technology</option>
          <option value='international'>International</option>
          <option value='education'>Education</option>
          <option value='breaking'>Breaking news</option>
          <option value='trending'>Trending</option>

        </Select>
      </div>
      <div className="flex gap-4 items-center justify-between border-4 border-dotted border-teal-500 p-3">
        <FileInput type='file' accept='images/*' onChange={(e)=> setFile(e.target.files[0])} />
        <Button className='focus:ring-0' type='button' onClick={handleauploadImage} gradientDuoTone='purpleToBlue' outline disabled={imageUploudProgress}>
          {imageUploudProgress ? 
          (
            <div className='w-16 h-16'>
              <CircularProgressbar value={imageUploudProgress} text={`${imageUploudProgress || 0}%`}/>
            </div>
          ) : 'Upload Image'}
        </Button>
        
      </div>
      {
          formData.image &&
          (
            <img src={formData.image} alt='Upload' className='w-full h-72 object-cover' />
          )
        }
      {imageUploadError && <Alert color='failure'>{imageUploadError}</Alert>}
      {fetchError && <Alert color='failure'>{fetchError}</Alert>}
      <ReactQuill value={formData.content1} theme='snow' placeholder='Write something' className='h-72 mb-12' required onChange={(value)=> setFormData({...formData, content1:value})}/>
      <ReactQuill value={formData.content2} theme='snow' placeholder='Write something' className='h-72 mb-12' required onChange={(value)=> setFormData({...formData, content2:value})}/>
      <Button className='focus:ring-0' gradientDuoTone='purpleToPink' type='submit'>Update Post</Button>
      </form>
    </div>
  )
}




<div>



<div className='min-h-screen'>
  <div>
  <div className='flex flex-col gap-3 py-8 md:py-20 px-3 max-w-6xl mx-auto'>
<h1 className='text-3xl font-bold lg:text-6xl'>Welcome to Comrade Trends!</h1>
<p className='text-gray-500 text-xs sm:text-sm'>At Comrade Trends, we're your trusted source for the latest news, insightful analysis, and trending stories from around the world.</p>
</div>
  </div>
    <div className='flex justify-center m-3'>
    <CallToAction/>
    </div>
    <div className='max-w-6xl mx-auto p-3 flex flex-col gap-8 py-7'>
      {breaking && breaking.length > 0 && 
        <div className='flex flex-col gap-6'>
        <h1 className=' text-2xl font-semibold text-center'>Breaking News</h1>
        <div className='flex justify-center flex-wrap gap-4'>
          {breaking.map((post)=>(
            <PostBar post={post} key={post._id}/>
          ))}
        </div>
      </div>
      }
      {trending && trending.length > 0 &&
      (
        <>
          <div className='flex flex-col gap-6'>
          <h1 className=' text-2xl font-semibold text-center'>Trending News</h1>
          <div className='flex justify-center flex-wrap gap-4'>
            {trending.map((post)=>(
              <PostBar post={post} key={post._id}/>
            ))}
          </div>
        </div>
        </>
      )}
    </div>
    <div>
    <div className='flex flex-col items-center'>
    {recent && recent.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Recent Posts</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {recent.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    {sports && sports.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Sports</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {sports.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    {politics && politics.length > 0 &&
    <div className='flex flex-col gap-3 text-center'>
      <h1 className=' text-2xl font-semibold text-center'>Politics</h1>
      <div  className='flex flex-col sm:flex-row h-full gap-1'>
     {politics.map((post)=>( 
      <PostCard key={post._id} post={post} />
     ))}
    </div>
    </div>
    }
    </div>
    </div>
    <div className=' mb-5 text-xl text-center hover:underline text-teal-500'>
    <Link  to='/search '>
      View All Posts
    </Link>
    </div>
   </div>

   <div>
   <head>
    <title>Suspects in murder at Shiners Boys High School to sit KCSE exams in custody</title>
    <meta data-n-head="ssr" charset="utf-8"/>
    <meta data-n-head="ssr" name="msapplication-TileColor" content="#da532c"/>
    <meta data-n-head="ssr" name="theme-color" content="#da532c"/>
    <meta data-n-head="ssr" name="viewport" content="width=device-width, initial-scale=1"/>
    <meta data-n-head="ssr" name="robots" content="index, follow"/>
    <meta data-n-head="ssr" data-hid="og:site_name" property="og:site_name" content="Citizen Digital"/>
    <meta data-n-head="ssr" data-hid="og:locale" property="og:locale" content="en"/>
    <meta data-n-head="ssr" data-hid="fb:app_id" property="fb:app_id" content="1773843079528698"/>
    <meta data-n-head="ssr" data-hid="og:locale:alternate" property="og:locale:alternate" content="en_KE"/>
    <meta data-n-head="ssr" data-hid="twitter:site" name="twitter:site" content="@citizentvkenya"/>
    <meta data-n-head="ssr" data-hid="twitter:card" name="twitter:card" content="summary_large_image"/>
  </head>
   </div>

</div>
